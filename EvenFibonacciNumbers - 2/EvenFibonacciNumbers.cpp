// EvenFibonacciNumbers.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iterator>
int fibonacciNumber(int n);
std::vector<int> fibonacciSeries(int n);
bool isEven(int number);
std::vector<int> evenFilteredFibonacci(std::vector<int> fib);
int sumOfEvenFilteredFibonacci(std::vector<int> evenFilteredFib);

int main()
{
	//***ATTENTION: I START MY FIBONACCI AT 0, NOT 1. SO THE FIRST TERM IN THE SERIES IS 0***

	//Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be :

	//0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

	//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even - valued terms.
	
	std::vector<int> first = fibonacciSeries(40); //copying address (I think)
	std::vector<int> filtered = evenFilteredFibonacci(first);
	
	//for (int index0 = 0; index0 < first.size(); index0++)
	//{
	//	std::cout << first[index0];
	//}

	//std::cout << std::endl;

	//for (int index = 0; index < filtered.size(); index++)
	//{
	//	std::cout << filtered[index];
	//}


	int sum = sumOfEvenFilteredFibonacci(filtered);
	std::cout << std::endl << sum << std::endl;



	system("pause");
    return 0;
}

int fibonacciNumber(int n) //given the term in the series, we get that number. Say we want the 6th term. We input 6 for n and should get a return of 8, the 6th term.
{
	if (n <= 1)
	{
		return n;
	}
	else
	{
		return fibonacciNumber(n - 1) + fibonacciNumber(n - 2);
	}
}

std::vector<int> fibonacciSeries(int n)
{
	std::vector<int> fibVector;
	std::stringstream fibSS;
	std::string fibString;

	for (int index = 0; index < n; index++)
	{
		fibVector.push_back(fibonacciNumber(index));
	}

	//from stack overflow, ty -- will need to review this
	//std::copy(fibVector.begin(), fibVector.end(), std::ostream_iterator<int>(fibSS));
	//fibString = fibSS.str();
	

	return fibVector;
}


bool isEven(int number)
{
	bool isEven = false;
	if (number % 2 == 0)
	{
		isEven = true;
	}
	return isEven;
}


std::vector<int> evenFilteredFibonacci(std::vector<int> fib)
{
	std::vector<int> evenFilteredFib;
	for (int index = 0; index < fib.size(); index++)
	{
		if (isEven(fib[index]))
		{
			evenFilteredFib.push_back(fib[index]);
		}
	}
	return evenFilteredFib;
}

int sumOfEvenFilteredFibonacci(std::vector<int> evenFilteredFib)
{
	int sum = 0;
	for (int index = 0; index < evenFilteredFib.size(); index++)
	{
		sum += evenFilteredFib[index];
	}
	return sum;
}